plugins {
    id "java-library"
    id "groovy"
    id "maven-publish"
    id "signing"
}

version projectVersion
group projectGroup

sourceCompatibility = jdkCompatibilityVersion
targetCompatibility = jdkCompatibilityVersion

repositories {
    mavenLocal()
    // If using a Maven proxy, put the property settings in
    // ~/.gradle/gradle.properties for default_proxy_url,
    // default_proxy_username and default_proxy_password.
    if (project.hasProperty("default_proxy_url")) {
        maven {
            url project.property("default_proxy_url")
            credentials {
                username project.property("default_proxy_username")
                password project.property("default_proxy_password")
            }
        }
    }
    mavenCentral()
}

jar {
    from { ["LICENSE", "NOTICE"] }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    from { ["LICENSE", "NOTICE"] }
    archiveClassifier = "sources"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    from { ["LICENSE", "NOTICE"] }
    archiveClassifier = "javadoc"
}

artifacts {
    archives jar, javadocJar, sourceJar
}

dependencies {
    /**
     * These dependencies are cobbled together using the top-level ApacheDS
     * source code pom.xml and service/pom.xml.  Want to stay away from the
     * monolithic JARs of packages like apacheds-all and apacheds-service,
     * which package a bunch of different libraries into one JAR.
     */
    def apacheDsVersion = "2.0.0.AM26"
    // This is org.apache.directory.api.version from top-level pom.xml.
    def apacheDirApiVersion = "2.0.0"
    // From service/pom.xml
    api group: "org.apache.directory.server", name: "apacheds-core-annotations", version: apacheDsVersion
    api group: "org.apache.directory.server", name: "apacheds-core-api", version: apacheDsVersion
    api group: "org.apache.directory.server", name: "apacheds-service-builder", version: apacheDsVersion
    api group: "org.apache.directory.api", name: "api-ldap-codec-standalone", version: apacheDirApiVersion
    api group: "org.apache.directory.api", name: "api-ldap-model", version: apacheDirApiVersion
    api group: "org.apache.directory.api", name: "api-ldap-schema-data", version: apacheDirApiVersion
    api group: "org.apache.directory.api", name: "api-util", version: apacheDirApiVersion

    implementation "commons-io:commons-io:2.11.0"

    testImplementation "org.codehaus.groovy:groovy-all:2.5.15"
    testImplementation "org.spockframework:spock-core:1.3-groovy-2.5"
    testImplementation "org.slf4j:slf4j-api:1.7.35"
    testRuntimeOnly "org.apache.logging.log4j:log4j-core:2.17.1"
    testRuntimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:2.17.1"
}

signing {
    useGpgCmd()
    sign publishing.publications
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name projectName
                    description projectDescription
                    url githubWebUrl
                    scm {
                        url githubWebUrl
                        connection "scm:git:${githubWebUrl}.git"
                        developerConnection "scm:git:${githubWebUrl}.git"
                        tag "v${project.version}"
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    issueManagement {
                        url "${githubWebUrl}/issues"
                    }
                    developers {
                        developer {
                            id 'bkoehm'
                            name 'Brian Koehmstedt'
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            url project.property("default_ossrh_url")
            credentials {
                username project.property("default_ossrh_username")
                password project.property("default_ossrh_password")
            }
        }
    }
}
